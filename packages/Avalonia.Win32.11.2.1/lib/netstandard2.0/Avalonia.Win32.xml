<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Win32</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Win32.Automation.InteropAutomationNode">
            <summary>
            An automation node which serves as the root of an embedded native control automation tree.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.DirectX.DxgiRenderTarget.BeginDrawCore">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Win32.Input.Imm32InputMethod">
            <summary>
            A Windows input method editor based on Windows Input Method Manager (IMM32).
            </summary>
        </member>
        <member name="T:Avalonia.Win32.Input.KeyInterop">
            <summary>
            Contains methods used to translate a Windows virtual/physical key to an Avalonia <see cref="T:Avalonia.Input.Key"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.IsExtended(System.Int32)">
            <summary>
            Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys.
            According to https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-keydown.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.KeyFromVirtualKey(System.Int32,System.Int32)">
            <summary>
            Gets an Avalonia key from a Windows virtual-key and key data.
            </summary>
            <param name="virtualKey">The Windows virtual-key.</param>
            <param name="keyData">The key data (in the same format as lParam for WM_KEYDOWN).</param>
            <returns>An Avalonia key, or <see cref="F:Avalonia.Input.Key.None"/> if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.VirtualKeyFromKey(Avalonia.Input.Key)">
            <summary>
            Gets a Windows virtual-key from an Avalonia key.
            </summary>
            <param name="key">The Avalonia key.</param>
            <returns>A Windows virtual-key code, or 0 if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.PhysicalKeyFromVirtualKey(System.Int32,System.Int32)">
            <summary>
            Gets a physical Avalonia key from a Windows virtual-key and key data.
            </summary>
            <param name="virtualKey">The Windows virtual-key.</param>
            <param name="keyData">The key data (in the same format as lParam for WM_KEYDOWN).</param>
            <returns>An Avalonia physical key, or <see cref="F:Avalonia.Input.PhysicalKey.None"/> if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Input.KeyInterop.GetKeySymbol(System.Int32,System.Int32)">
            <summary>
            Gets a key symbol from a Windows virtual-key and key data.
            </summary>
            <param name="virtualKey">The Windows virtual-key.</param>
            <param name="keyData">The key data (in the same format as lParam for WM_KEYDOWN).</param>
            <returns>A key symbol, or null if none matched.</returns>
        </member>
        <member name="M:Avalonia.Win32.Interop.TaskBarList.MarkFullscreen(System.IntPtr,System.Boolean)">
            <summary>
            Ported from https://github.com/chromium/chromium/blob/master/ui/views/win/fullscreen_handler.cc
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="fullscreen">Fullscreen state.</param>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Normal">
            <summary>
            Activates and displays a window. If the window is minimized, maximized, or arranged, the system restores it to its original 
            size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Maximize">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMaximized">
            <inheritdoc cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Maximize"/>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value is similar to <see cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Normal"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to <see cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowMinimized"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is similar to <see cref="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Show"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.Restore">
            <summary>
            Activates and displays the window. If the window is minimized, maximized, or arranged, the system restores it to its original size and position. 
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ShowDefault">
            <summary>
            Sets the show state based on the <see cref="T:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand"/> value specified in the STARTUPINFO structure passed to the CreateProcess function 
            by the program that started the application.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ShowWindowCommand.ForceMinimize">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPATTR">
            <summary>Retrieve or update the attribute of the composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPCLAUSE">
            <summary>Retrieve or update clause information of the composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPREADATTR">
            <summary>Retrieve or update the attributes of the reading string of the current composition.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPREADCLAUSE">
            <summary>Retrieve or update the clause information of the reading string of the composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPREADSTR">
            <summary>Retrieve or update the reading string of the current composition.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_COMPSTR">
            <summary>Retrieve or update the current composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_CURSORPOS">
            <summary>Retrieve or update the cursor position in composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_DELTASTART">
            <summary>Retrieve or update the starting position of any changes in composition string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTCLAUSE">
            <summary>Retrieve or update clause information of the result string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTREADCLAUSE">
            <summary>Retrieve or update clause information of the reading string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTREADSTR">
            <summary>Retrieve or update the reading string.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.GCS.GCS_RESULTSTR">
            <summary>Retrieve or update the string of the composition result.</summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_TEXT">
            <summary>
            Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_BITMAP">
            <summary>
            A handle to a bitmap
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_DIB">
            <summary>
            A memory object containing a BITMAPINFO structure followed by the bitmap bits.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_UNICODETEXT">
            <summary>
            Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_HDROP">
            <summary>
            A handle to type HDROP that identifies a list of files. 
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Length">
            <summary>
            The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
            <para>
            GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
            </para>
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Flags">
            <summary>
            Specifies flags that control the position of the minimized window and the method by which the window is restored.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.ShowCmd">
            <summary>
            The current show state of the window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.MinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.MaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.NormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="P:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Default">
            <summary>
            Gets the default (empty) value.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_MOVE">
            <summary>
            Movement has occurred. Cannot be combined with TOUCHEVENTF_DOWN.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_DOWN">
            <summary>
            The corresponding touch point was established through a new contact. Cannot be combined with TOUCHEVENTF_MOVE or TOUCHEVENTF_UP.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_UP">
            <summary>
            A touch point was removed.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_INRANGE">
            <summary>
            A touch point is in range. This flag is used to enable touch hover support on compatible hardware. Applications that do not want support for hover can ignore this flag.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_PRIMARY">
            <summary>
            Indicates that this TOUCHINPUT structure corresponds to a primary contact point. See the following text for more information on primary touch points.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_NOCOALESCE">
            <summary>
            When received using GetTouchInputInfo, this input was not coalesced.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_PALM">
            <summary>
            The touch event came from the user's palm.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.Icons.ICON_SMALL2">
            <summary>The small icon, but with the system theme variant rather than the window's own theme. Requested by other processes, e.g. the taskbar and Task Manager.</summary>
        </member>
        <member name="T:Avalonia.Win32.OpenGl.WglGdiResourceManager">
             <summary>
             - ReleaseDC can only happen from the same thread that has called GetDC
             - When thread exits all of its windows and HDCs are getting destroyed
             - We need to create OpenGL context (require a window and an HDC) and render targets (require an HDC) from thread pool threads
            
             So this class hosts a dedicated thread for managing offscreen windows and HDCs for OpenGL
             </summary>
        </member>
        <member name="F:Avalonia.Win32.PlatformConstants.Windows10_1607">
            <summary>
            Windows 10 Anniversary Update
            </summary>
        </member>
        <member name="M:Avalonia.Win32.TrayIconImpl.SetIcon(Avalonia.Platform.IWindowIconImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.TrayIconImpl.SetIsVisible(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Win32.TrayIconImpl.SetToolTipText(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Win32.TrayIconImpl.CustomWindowsMessage">
            <summary>
            Custom Win32 window messages for the NotifyIcon
            </summary>
        </member>
        <member name="P:Avalonia.Win32.Win32Platform.WindowsVersion">
            <summary>
            Gets the actual WindowsVersion. Same as the info returned from RtlGetVersion.
            </summary>
        </member>
        <member name="T:Avalonia.Win32.WindowImpl">
            <summary>
            Window implementation for Win32 platform.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.WindowImpl.StandardDpi">
            <summary>
            The Windows DPI which equates to a <see cref="P:Avalonia.Win32.WindowImpl.RenderScaling"/> of 1.0.
            </summary>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.SetTransparencyMica">
            <summary>
            Sets the transparency mica
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.SetFullScreen(System.Boolean)">
            <summary>
            Ported from https://github.com/chromium/chromium/blob/master/ui/views/win/fullscreen_handler.cc
            Method must only be called from inside UpdateWindowProperties.
            </summary>
            <param name="fullscreen"></param>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.SetExtendClientAreaTitleBarHeightHint(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Win32.WindowImpl.GetWindowsZOrder(System.Span{Avalonia.Controls.Window},System.Span{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.IsClientAreaExtendedToDecorations">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.ExtendClientAreaToDecorationsChanged">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.NeedsManagedDecorations">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.ExtendedMargins">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.OffScreenMargin">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.AcrylicCompensationLevels">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.WindowStylesCallback">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Win32.WindowImpl.WndProcHookCallback">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Win32.WinRT.WinRTApiInformation">
            <summary>
            Any WinRT API might not be available even if Windows version is supposed to support them (Win PE, Xbox...).
            Using ApiInformation is a typical solution in UWP/WinUI apps, so we should do as well.
            </summary>
        </member>
        <member name="T:Avalonia.Win32RenderingMode">
            <summary>
            Represents the rendering mode for platform graphics.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.Software">
            <summary>
            Avalonia is rendered into a framebuffer.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.AngleEgl">
            <summary>
            Enables ANGLE EGL for Windows with GPU rendering.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.Wgl">
            <summary>
            Avalonia would try to use native Widows OpenGL with GPU rendering.
            </summary>
        </member>
        <member name="F:Avalonia.Win32RenderingMode.Vulkan">
            <summary>
            Avalonia would try to use native Widows Vulkan with GPU rendering.
            </summary>
        </member>
        <member name="T:Avalonia.Win32DpiAwareness">
            <summary>
            Represents the DPI Awareness for the application.
            </summary>
        </member>
        <member name="F:Avalonia.Win32DpiAwareness.Unaware">
            <summary>
            The application is DPI unaware.
            </summary>
        </member>
        <member name="F:Avalonia.Win32DpiAwareness.SystemDpiAware">
            <summary>
            The application is system DPI aware. It will query DPI once and will not adjust to new DPI changes
            </summary>
        </member>
        <member name="F:Avalonia.Win32DpiAwareness.PerMonitorDpiAware">
            <summary>
            The application is per-monitor DPI aware. It adjust its scale factor whenever DPI changes.
            </summary>
        </member>
        <member name="T:Avalonia.Win32CompositionMode">
            <summary>
            Represents the Win32 window composition mode.
            </summary>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.WinUIComposition">
            <summary>
            Render Avalonia to a texture inside the Windows.UI.Composition tree.
            </summary>
            <remarks>
            Supported on Windows 10 build 17134 and above. Ignored on other versions.
            This is recommended option, as it allows window acrylic effects and high refresh rate rendering.<br/>
            Can only be applied with <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/>=<see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.DirectComposition">
            <summary>
            Render Avalonia to a texture inside the DirectComposition tree.
            </summary>
            <remarks>
            Supported on Windows 8 and above. Ignored on other versions.<br/>
            Can only be applied with <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/>=<see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.LowLatencyDxgiSwapChain">
            <summary>
            When <see cref="F:Avalonia.Win32CompositionMode.LowLatencyDxgiSwapChain"/> is active, renders Avalonia through a low-latency Dxgi Swapchain.
            </summary>
            <remarks>
            Requires Feature Level 11_3 to be active, Windows 8.1+ Any Subversion. 
            This is only recommended if low input latency is desirable, and there is no need for the transparency
            and styling / blurring offered by <see cref="F:Avalonia.Win32CompositionMode.WinUIComposition"/>.<br/>
            Can only be applied with <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/>=<see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Win32CompositionMode.RedirectionSurface">
            <summary>
            The window renders to a redirection surface.
            </summary>
            <remarks>
            This option is kept only for compatibility with older systems. Some Avalonia features might not work.
            </remarks>
        </member>
        <member name="T:Avalonia.Win32PlatformOptions">
            <summary>
            Platform-specific options which apply to Windows.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.OverlayPopups">
            <summary>
            Embeds popups to the window when set to true. The default value is false.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.RenderingMode">
            <summary>
            Gets or sets Avalonia rendering modes with fallbacks.
            The first element in the array has the highest priority.
            The default value is: <see cref="F:Avalonia.Win32RenderingMode.AngleEgl"/>, <see cref="F:Avalonia.Win32RenderingMode.Software"/>.
            </summary>
            <remarks>
            If application should work on as wide range of devices as possible, at least add <see cref="F:Avalonia.Win32RenderingMode.Software"/> as a fallback value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if no values were matched.</exception>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.CompositionMode">
            <summary>
            Gets or sets Avalonia composition modes with fallbacks.
            The first element in the array has the highest priority.
            The default value is: <see cref="F:Avalonia.Win32CompositionMode.WinUIComposition"/>, <see cref="F:Avalonia.Win32CompositionMode.DirectComposition"/>, <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/>.
            </summary>
            <remarks>
            If application should work on as wide range of devices as possible, at least add <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/> as a fallback value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if no values were matched.</exception>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.WinUICompositionBackdropCornerRadius">
            <summary>
            When <see cref="P:Avalonia.Win32PlatformOptions.CompositionMode"/> is set to <see cref="F:Avalonia.Win32CompositionMode.WinUIComposition"/>, create rounded corner blur brushes
            If set to null the brushes will be created using default settings (sharp corners)
            This can be useful when you need a rounded-corner blurred Windows 10 app, or borderless Windows 11 app.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.ShouldRenderOnUIThread">
            <summary>
            Render directly on the UI thread instead of using a dedicated render thread.
            Only applicable if <see cref="P:Avalonia.Win32PlatformOptions.CompositionMode"/> is set to <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/>.
            This setting is only recommended for interop with systems that must render on the UI thread, such as WPF.
            This setting is false by default.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.WglProfiles">
            <summary>
            Windows OpenGL profiles used when <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/> is set to <see cref="F:Avalonia.Win32RenderingMode.Wgl"/>.
            This setting is 4.0 and 3.2 by default.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.CustomPlatformGraphics">
            <summary>
            Provides a way to use a custom-implemented graphics context such as a custom ISkiaGpu.
            When this property set <see cref="P:Avalonia.Win32PlatformOptions.RenderingMode"/> is ignored
            and <see cref="P:Avalonia.Win32PlatformOptions.CompositionMode"/> only accepts null or <see cref="F:Avalonia.Win32CompositionMode.RedirectionSurface"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.DpiAwareness">
            <summary>
            Gets or sets the application's DPI awareness.
            </summary>
        </member>
        <member name="P:Avalonia.Win32PlatformOptions.GraphicsAdapterSelectionCallback">
            <summary>
            Specifies a callback method to be called when compositor needs to create a platform graphics device
            Currently is only called for AngleEgl rendering mode when DirectX 11 is used
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.LUID">
            <summary>The LUID structure is an opaque structure that specifies an identifier that is guaranteed to be unique on the local machine. For more information, see the reference page for LUID in the Microsoft Windows SDK documentation.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ntdef/ns-ntdef-luid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.POINTL">
            <summary>The POINTL structure defines the x- and y-coordinates of a point.</summary>
            <remarks>The POINTL structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-point">POINT</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.POINTL.x">
            <summary>Specifies the <i>x</i>-coordinate of the point.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.POINTL.y">
            <summary>Specifies the <i>y</i>-coordinate of the point.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECT">
            <summary>The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>The RECT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECTL">
            <summary>The RECTL structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>The RECTL structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECTL.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECTL.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECTL.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECTL.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_32.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.__char_64.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_64.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_64.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_64.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_64.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.__char_128.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_128.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_128.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_128.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_128.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.DEVMODEW">
            <summary>The DEVMODEW structure is used for specifying characteristics of display and print devices in the Unicode (wide) character set.</summary>
            <remarks>
            <para>The <a href="https://docs.microsoft.com/windows-hardware/drivers/display/the-devmodew-structure">DEVMODEW structure</a> is the Unicode version of the <a href="https://docs.microsoft.com/previous-versions//ms535771(v=vs.85)">DEVMODE </a> structure (described in the Microsoft Windows SDK documentation). While applications can use either the ANSI or Unicode version of the structure, drivers are required to use the Unicode version. For printer drivers, the DEVMODEW structure is used for specifying printer characteristics required by a print document. It is also used for specifying a printer's default characteristics. Immediately following a DEVMODEW structure's defined members (often referred to as its public members), there can be a set of driver-defined members (often referred to as private DEVMODEW members). The driver supplies the size, in bytes, of this private area in <b>dmDriverExtra</b>. Driver-defined private members are for exclusive use by the driver. The starting address for the private members can be referenced using the <b>dmSize</b> member as follows:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDeviceName">
            <summary>
            <para>For a display, specifies the name of the display driver's DLL; for example, "perm3dd" for the 3Dlabs Permedia3 display driver. For a printer, specifies the "friendly name"; for example, "PCL/HP LaserJet" in the case of PCL/HP LaserJet. If the name is greater than CCHDEVICENAME characters in length, the spooler truncates it to fit in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmSpecVersion">
            <summary>Specifies the version number of this DEVMODEW structure. The current version number is identified by the DM_SPECVERSION constant in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDriverVersion">
            <summary>
            <para>For a printer, specifies the printer driver version number assigned by the printer driver developer. Display drivers can set this member to DM_SPECVERSION.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmSize">
            <summary>Specifies the size in bytes of the public DEVMODEW structure, not including any private, driver-specified members identified by the <b>dmDriverExtra</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDriverExtra">
            <summary>Specifies the number of bytes of private driver data that follow the public structure members. If a device driver does not provide private DEVMODEW members, this member should be set to zero.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmFields">
            <summary>Specifies bit flags identifying which of the following DEVMODEW members are in use. For example, the DM_ORIENTATION flag is set when the <b>dmOrientation</b> member contains valid data. The DM_XXX flags are defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmColor">
            <summary>
            <para>For printers, specifies whether a color printer should print color or monochrome. This member can be one of DMCOLOR_COLOR or DMCOLOR_MONOCHROME. This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDuplex">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmYResolution">
            <summary>
            <para>For printers, specifies the <i>y</i> resolution of the printer, in DPI. If this member is used, the <b>dmPrintQuality</b> member specifies the <i>x</i> resolution. This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmTTOption">
            <summary>
            <para>For printers, specifies how TrueType fonts should be printed. This member must be one of the DMTT-prefixed constants defined in <i>wingdi.h</i>. This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmCollate">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmFormName">
            <summary>
            <para>For printers, specifies the name of the form to use; such as "Letter" or "Legal". This must be a name that can be obtain by calling the Win32 <b>EnumForms</b> function (described in the Microsoft Window SDK documentation). This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmLogPixels">
            <summary>
            <para>For displays, specifies the number of logical pixels per inch of a display device and should be equal to the <b>ulLogPixels</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winddi/ns-winddi-gdiinfo">GDIINFO</a> structure. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmBitsPerPel">
            <summary>
            <para>For displays, specifies the color resolution, in bits per pixel, of a display device. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPelsWidth">
            <summary>
            <para>For displays, specifies the width, in pixels, of the visible device surface. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPelsHeight">
            <summary>
            <para>For displays, specifies the height, in pixels, of the visible device surface. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDisplayFrequency">
            <summary>
            <para>For displays, specifies the frequency, in hertz, of a display device in its current mode. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmICMMethod">
            <summary>Specifies one of the DMICMMETHOD-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmICMIntent">
            <summary>Specifies one of the DMICM-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmMediaType">
            <summary>Specifies one of the DMMEDIA-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDitherType">
            <summary>Specifies one of the DMDITHER-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmReserved1">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmReserved2">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPanningWidth">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPanningHeight">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.MONITORINFO">
            <summary>The MONITORINFO structure contains information about a display monitor.The GetMonitorInfo function stores information in a MONITORINFO structure or a MONITORINFOEX structure.The MONITORINFO structure is a subset of the MONITORINFOEX structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.cbSize">
            <summary>
            <para>The size of the structure, in bytes. Set this member to <c>sizeof ( MONITORINFO )</c> before calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmonitorinfoa">GetMonitorInfo</a> function. Doing so lets the function determine the type of structure you are passing to it.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.rcMonitor">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.rcWork">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.dwFlags">
            <summary>
            <para>A set of flags that represent attributes of the display monitor. The following flag is defined. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.MONITORINFOEXW">
            <summary>The MONITORINFOEX structure contains information about a display monitor.The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.The MONITORINFOEX structure is a superset of the MONITORINFO structure. (Unicode)</summary>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines MONITORINFOEX as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfoexw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFOEXW.szDevice">
            <summary>A string that specifies the device name of the monitor being used.  Most applications have no use for a display monitor name, and so can save some bytes by using a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION">
            <summary>The DISPLAYCONFIG_2DREGION structure represents a point or an offset in a two-dimensional space.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_2dregion">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION.cx">
            <summary>The horizontal component of the point or offset.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION.cy">
            <summary>The vertical component of the point or offset.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_DESKTOP_IMAGE_INFO">
            <summary>The DISPLAYCONFIG_DESKTOP_IMAGE_INFO structure contains information about the image displayed on the desktop.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_desktop_image_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DESKTOP_IMAGE_INFO.PathSourceSize">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-pointl">POINTL</a> structure that specifies the size of the VidPn source surface that is being displayed on the monitor.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DESKTOP_IMAGE_INFO.DesktopImageRegion">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure that defines where the desktop image will be positioned within path source. 	Region must be completely inside the bounds of the path source size.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DESKTOP_IMAGE_INFO.DesktopImageClip">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure that defines which part of the desktop image for this clone group will be displayed on this path. This currently must be set to the desktop size.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER">
            <summary>The DISPLAYCONFIG_DEVICE_INFO_HEADER structure contains display information about the device.</summary>
            <remarks>The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function uses the DISPLAYCONFIG_DEVICE_INFO_HEADER structure for retrieving display configuration information about the device, and the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfigsetdeviceinfo">DisplayConfigSetDeviceInfo</a> function uses the DISPLAYCONFIG_DEVICE_INFO_HEADER structure for setting display configuration information for the device.</remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER.type">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_device_info_type">DISPLAYCONFIG_DEVICE_INFO_TYPE</a> enumerated value that determines the type of device information to retrieve or set. The remainder of the packet for the retrieve or set operation follows immediately after the DISPLAYCONFIG_DEVICE_INFO_HEADER structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER.size">
            <summary>The size, in bytes, of the device information that is retrieved or set. This size includes the size of the header and the size of the additional data that follows the header. This device information depends on the request type.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER.adapterId">
            <summary>A locally unique identifier (LUID) that identifies the adapter that the device information packet refers to.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER.id">
            <summary>The source or target identifier to get or set the device information for. The meaning of this identifier is related to the type of information being requested. For example, in the case of DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME, this is the source identifier.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE">
            <summary>The DISPLAYCONFIG_DEVICE_INFO_TYPE enumeration specifies the type of display device info to configure or obtain through the DisplayConfigSetDeviceInfo or DisplayConfigGetDeviceInfo function.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_device_info_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME">
            <summary>Specifies the source name of the display device. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> returns the source name in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_source_device_name">DISPLAYCONFIG_SOURCE_DEVICE_NAME</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME">
            <summary>Specifies information about the monitor. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> returns info about the monitor in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_device_name">DISPLAYCONFIG_TARGET_DEVICE_NAME</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE">
            <summary>Specifies information about the preferred mode of a monitor. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> returns info about the preferred mode of a monitor in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_preferred_mode">DISPLAYCONFIG_TARGET_PREFERRED_MODE</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME">
            <summary>Specifies the graphics adapter name. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> returns the adapter name in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_adapter_name">DISPLAYCONFIG_ADAPTER_NAME</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE">
            <summary>Specifies how to set the monitor. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfigsetdeviceinfo">DisplayConfigSetDeviceInfo</a> function is successful, <b>DisplayConfigSetDeviceInfo</b> uses info in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_set_target_persistence">DISPLAYCONFIG_SET_TARGET_PERSISTENCE</a> structure to force the output in a boot-persistent manner.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE">
            <summary>
            <para>Specifies how to set the base output technology for a given target ID. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> returns base output technology info in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_base_type">DISPLAYCONFIG_TARGET_BASE_TYPE</a> structure. Supported by WDDM 1.3 and later user-mode display drivers running on Windows 8.1 and later.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_device_info_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION">
            <summary>Specifies the state of virtual mode support. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> returns virtual mode support information in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_support_virtual_resolution">DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION</a> structure. Supported starting in Windows 10.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION">
            <summary>Specifies how to set the state of virtual mode support. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfigsetdeviceinfo">DisplayConfigSetDeviceInfo</a> function is successful, <b>DisplayConfigSetDeviceInfo</b> uses info in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_support_virtual_resolution">DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION</a> structure to change the state of virtual mode support. Supported starting in Windows 10.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL">
            <summary>
            <para>Specifies the current SDR white level for an HDR monitor. If the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfigsetdeviceinfo">DisplayConfigGetDeviceInfo</a> function is successful, <b>DisplayConfigGetDeviceInfo</b> return SDR white level info in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_sdr_white_level">DISPLAYCONFIG_SDR_WHITE_LEVEL</a> structure. Supported starting in Windows�10 Fall Creators Update (Version 1709).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_device_info_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO">
            <summary>The DISPLAYCONFIG_MODE_INFO structure contains either source mode or target mode information.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_mode_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO.infoType">
            <summary>A value that indicates whether the <b>DISPLAYCONFIG_MODE_INFO</b> structure represents source or target mode information. If <b>infoType</b> is DISPLAYCONFIG_MODE_INFO_TYPE_TARGET, the <i>targetMode</i> parameter value contains a valid DISPLAYCONFIG_TARGET_MODE structure describing the specified target. If <b>infoType</b> is DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE, the <i>sourceMode</i> parameter value contains a valid DISPLAYCONFIG_SOURCE_MODE structure describing the specified source.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO.id">
            <summary>The source or target identifier on the specified adapter that this path relates to.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO.adapterId">
            <summary>The identifier of the adapter that this source or target mode information relates to.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO_TYPE">
            <summary>The DISPLAYCONFIG_MODE_INFO_TYPE enumeration specifies that the information that is contained within the DISPLAYCONFIG_MODE_INFO structure is either source or target mode.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_mode_info_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO_TYPE.DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE">
            <summary>Indicates that the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_mode_info">DISPLAYCONFIG_MODE_INFO</a> structure contains source mode information.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO_TYPE.DISPLAYCONFIG_MODE_INFO_TYPE_TARGET">
            <summary>Indicates that the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_mode_info">DISPLAYCONFIG_MODE_INFO</a> structure contains target mode information.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO_TYPE.DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE">
            <summary>Indicates that the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_mode_info">DISPLAYCONFIG_MODE_INFO</a> structure contains a valid <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_desktop_image_info">DISPLAYCONFIG_DESKTOP_IMAGE_INFO</a> structure. Supported starting in Windows 10.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO">
            <summary>The DISPLAYCONFIG_PATH_INFO structure is used to describe a single path from a target to a source.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_path_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO.sourceInfo">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_source_info">DISPLAYCONFIG_PATH_SOURCE_INFO</a> structure that contains the source information for the path.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO.targetInfo">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_target_info">DISPLAYCONFIG_PATH_TARGET_INFO</a> structure that contains the target information for the path.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO.flags">
            <summary>
            <para>A bitwise OR of flag values that indicates the state of the path. The following values are supported:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_path_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO">
            <summary>The DISPLAYCONFIG_PATH_SOURCE_INFO structure contains source information for a single path.</summary>
            <remarks>
            <para>A DISPLAYCONFIG_PATH_SOURCE_INFO structure is specified in the <b>sourceInfo</b> member of a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_info">DISPLAYCONFIG_PATH_INFO</a> structure. A source corresponds to a surface on which the display adapter can render pixels. Each display adapter is capable of rendering to x number of sources. What this means is how many desktops can be rendered for extend mode. This is typically 2. For example, source 0 might be rendering pixels from 0,0 to 1024,768, and source 1 might be rendering pixels from 1025,0 to 2048, 768.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_path_source_info#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO.adapterId">
            <summary>The identifier of the adapter that this source information relates to.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO.id">
            <summary>The source identifier on the specified adapter that this path relates to.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags">
            <summary>A bitwise OR of flag values that indicates the status of the source. The following values are supported:</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO._Anonymous_e__Union._Anonymous_e__Struct.cloneGroupId">
            <summary>Gets or sets bits 0-15 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field. Allowed values are [0..65535].</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO._Anonymous_e__Union._Anonymous_e__Struct.sourceModeInfoIdx">
            <summary>Gets or sets bits 16-31 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field. Allowed values are [0..65535].</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO">
            <summary>The DISPLAYCONFIG_PATH_TARGET_INFO structure contains target information for a single path.</summary>
            <remarks>
            <para>A DISPLAYCONFIG_PATH_TARGET_INFO structure is specified in the <b>targetInfo</b> member of a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_info">DISPLAYCONFIG_PATH_INFO</a> structure. A target corresponds to the number of possible video outputs on a display adapter. This number, however, does not equate to the number of physical connectors on the display adapter. Each connector exposes a number of targets that includes backward compatibility with older connector technology. For example, a DVI connector exposes a DVI target, as well as a VGA target. A DisplayPort connector, which was introduced in 2006, exposes DisplayPort, HDMI, DVI, legacy TV, and VGA targets. The <b>statusFlags</b> member is set when you call the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_path_target_info#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.adapterId">
            <summary>The identifier of the adapter that the path is on.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.id">
            <summary>The target identifier on the specified adapter that this path relates to.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.outputTechnology">
            <summary>The target's connector type. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_video_output_technology">DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY</a> enumerated type.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.rotation">
            <summary>A value that specifies the rotation of the target. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_rotation">DISPLAYCONFIG_ROTATION</a> enumerated type.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.scaling">
            <summary>A value that specifies how the source image is scaled to the target. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_scaling">DISPLAYCONFIG_SCALING</a> enumerated type. For more information about scaling, see <a href="https://docs.microsoft.com/windows-hardware/drivers/display/scaling-the-desktop-image">Scaling the Desktop Image</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.refreshRate">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_rational">DISPLAYCONFIG_RATIONAL</a> structure that specifies the refresh rate of the target. If the caller specifies target mode information, the operating system will instead use the refresh rate that is stored in the <b>vSyncFreq</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_video_signal_info">DISPLAYCONFIG_VIDEO_SIGNAL_INFO</a> structure. In this case, the caller specifies this value in the <b>targetVideoSignalInfo</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_mode">DISPLAYCONFIG_TARGET_MODE</a> structure. A refresh rate with both the numerator and denominator set to zero indicates that the caller does not specify a refresh rate and the operating system should use the most optimal refresh rate available. For this case, in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig</a> function, the caller must set the <b>scanLineOrdering</b> member to the DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED value; otherwise, <b>SetDisplayConfig</b> fails.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.scanLineOrdering">
            <summary>A value that specifies the scan-line ordering of the output on the target. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_scanline_ordering">DISPLAYCONFIG_SCANLINE_ORDERING</a> enumerated type. If the caller specifies target mode information, the operating system will instead use the scan-line ordering that is stored in the <b>scanLineOrdering</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_video_signal_info">DISPLAYCONFIG_VIDEO_SIGNAL_INFO</a> structure. In this case, the caller specifies this value in the <b>targetVideoSignalInfo</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_mode">DISPLAYCONFIG_TARGET_MODE</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.targetAvailable">
            <summary>
            <para>A Boolean value that specifies whether the target is available. <b>TRUE</b> indicates that the target is available. Because the asynchronous nature of display topology changes when a monitor is removed, a path might still be marked as active even though the monitor has been removed. In such a case, <b>targetAvailable</b> could be <b>FALSE</b> for an active path. This is typically a transient situation that will change after the operating system  takes action on the monitor removal.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_path_target_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO.statusFlags">
            <summary>
            <para>A bitwise OR of flag values that indicates the status of the target. The following values are supported:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_path_target_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO._Anonymous_e__Union._Anonymous_e__Struct.desktopModeInfoIdx">
            <summary>Gets or sets bits 0-15 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field. Allowed values are [0..65535].</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO._Anonymous_e__Union._Anonymous_e__Struct.targetModeInfoIdx">
            <summary>Gets or sets bits 16-31 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field. Allowed values are [0..65535].</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT">
            <summary>The DISPLAYCONFIG_PIXELFORMAT enumeration specifies pixel format in various bits per pixel (BPP) values.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_pixelformat">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_8BPP">
            <summary>Indicates 8 BPP format.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_16BPP">
            <summary>Indicates 16 BPP format.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_24BPP">
            <summary>Indicates 24 BPP format.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_32BPP">
            <summary>Indicates 32 BPP format.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_NONGDI">
            <summary>Indicates that the current display is not an 8, 16, 24, or 32 BPP GDI desktop mode. For example, a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> function returns DISPLAYCONFIG_PIXELFORMAT_NONGDI if a DirectX application previously set the desktop to A2R10G10B10 format. A call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig</a> function fails if any pixel formats for active paths are set to DISPLAYCONFIG_PIXELFORMAT_NONGDI.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL">
            <summary>The DISPLAYCONFIG_RATIONAL structure describes a fractional value that represents vertical and horizontal frequencies of a video mode (that is, vertical sync and horizontal sync).</summary>
            <remarks>A DISPLAYCONFIG_RATIONAL structure is specified in members of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_target_info">DISPLAYCONFIG_PATH_TARGET_INFO</a> and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_video_signal_info">DISPLAYCONFIG_VIDEO_SIGNAL_INFO</a> structures.</remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL.Numerator">
            <summary>The numerator of the frequency fraction.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL.Denominator">
            <summary>The denominator of the frequency fraction.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION">
            <summary>The DISPLAYCONFIG_ROTATION enumeration specifies the clockwise rotation of the display.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_rotation">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_IDENTITY">
            <summary>Indicates that rotation is 0 degrees—landscape mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_ROTATE90">
            <summary>Indicates that rotation is 90 degrees clockwise—portrait mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_ROTATE180">
            <summary>Indicates that rotation is 180 degrees clockwise—inverted landscape mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_ROTATE270">
            <summary>Indicates that rotation is 270 degrees clockwise—inverted portrait mode.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING">
            <summary>The DISPLAYCONFIG_SCALING enumeration specifies the scaling transformation applied to content displayed on a video present network (VidPN) present path.</summary>
            <remarks>For more information about scaling, see <a href="https://docs.microsoft.com/windows-hardware/drivers/display/scaling-the-desktop-image">Scaling the Desktop Image</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_IDENTITY">
            <summary>Indicates the identity transformation; the source content is presented with no change. This transformation is available only if the path's source mode has the same spatial resolution as the path's target mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_CENTERED">
            <summary>Indicates the centering transformation; the source content is presented unscaled, centered with respect to the spatial resolution of the target mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_STRETCHED">
            <summary>Indicates the content is scaled to fit the path's target.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX">
            <summary>Indicates the aspect-ratio centering transformation.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_CUSTOM">
            <summary>Indicates that the caller requests a custom scaling that the caller cannot describe with any of the other DISPLAYCONFIG_SCALING_XXX values. Only a hardware vendor's value-add application should use DISPLAYCONFIG_SCALING_CUSTOM, because the value-add application might require a private interface to the driver. The application can then use DISPLAYCONFIG_SCALING_CUSTOM to indicate additional context for the driver for the custom value on the specified path.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_PREFERRED">
            <summary>Indicates that the caller does not have any preference for the scaling. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig</a> function will use the scaling value that was last saved in the database for the path. If such a scaling value does not exist, <b>SetDisplayConfig</b> will use the default scaling for the computer. For example, stretched (DISPLAYCONFIG_SCALING_STRETCHED) for tablet computers and aspect-ratio centered (DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX) for non-tablet computers.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING">
            <summary>The DISPLAYCONFIG_SCANLINE_ORDERING enumeration specifies the method that the display uses to create an image on a screen.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_scanline_ordering">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED">
            <summary>Indicates that scan-line ordering of the output is unspecified. The caller can only set the <b>scanLineOrdering</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_target_info">DISPLAYCONFIG_PATH_TARGET_INFO</a> structure in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig</a> function to DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED if the caller also set the refresh rate denominator and numerator of the <b>refreshRate</b> member both to zero. In this case, <b>SetDisplayConfig</b> uses the best refresh rate it can find.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE">
            <summary>Indicates that the output is a progressive image.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED">
            <summary>Indicates that the output is an interlaced image that is created beginning with the upper field.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST">
            <summary>Indicates that the output is an interlaced image that is created beginning with the upper field.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST">
            <summary>Indicates that the output is an interlaced image that is created beginning with the lower field.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_DEVICE_NAME">
            <summary>The DISPLAYCONFIG_SOURCE_DEVICE_NAME structure contains the GDI device name for the source or view.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_source_device_name">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_DEVICE_NAME.header">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_device_info_header">DISPLAYCONFIG_DEVICE_INFO_HEADER</a> structure that contains information about the request for the source device name. The caller should set the <b>type</b> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME and the <b>adapterId</b> and <b>id</b> members of DISPLAYCONFIG_DEVICE_INFO_HEADER to the source for which the caller wants the source device name. The caller should set the <b>size</b> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of the DISPLAYCONFIG_SOURCE_DEVICE_NAME structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_DEVICE_NAME.viewGdiDeviceName">
            <summary>A NULL-terminated WCHAR string that is the GDI device name for the source, or view. This name can be used in a call to <b>EnumDisplaySettings</b> to obtain a list of available modes for the specified source.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE">
            <summary>The DISPLAYCONFIG_SOURCE_MODE structure represents a point or an offset in a two-dimensional space.</summary>
            <remarks>
            <para>The arrangement of source surfaces on the desktop is controlled by the <b>position</b> member, which specifies the position in desktop coordinates of the upper-left corner of the source surface. The source surface that is positioned at (0, 0) is considered the primary. GDI has strict rules about how the source surfaces can be arranged in the desktop space. For example, there cannot be any gaps between source surfaces, and there can be no overlaps. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig</a> function attempts to rearrange source surfaces in order to enforce these layout rules. The caller must make every effort to lay out the source surfaces correctly because  GDI  rearranges the sources in an undefined manner to enforce the layout rules. The resultant layout may not be what the caller wanted to achieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_source_mode#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE.width">
            <summary>The width in pixels of the source mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE.height">
            <summary>The height in pixels of the source mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE.pixelFormat">
            <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_pixelformat">DISPLAYCONFIG_PIXELFORMAT</a> enumeration that specifies the pixel format of the source mode.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE.position">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-pointl">POINTL</a> structure that specifies the position in the desktop coordinate space of the  upper-left corner of this source surface. The source surface that is located at (0, 0) is always the primary source surface.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME">
            <summary>The DISPLAYCONFIG_TARGET_DEVICE_NAME structure contains information about the target.</summary>
            <remarks>
            <para>Extended display identification data (EDID) is a set of data that is provided by a display to describe its capabilities to a graphics adapter. EDID data allows a computer to detect the type of monitor that is connected to it. EDID data includes the manufacturer name, the product type, the timings that are supported by the display, the display size, as well as other display characteristics. EDID is defined by a standard published by the Video Electronics Standards Association (VESA). A named device object has a path and name of the form <i>\Device\DeviceName</i>. This is known as the <i>device name</i> of the device object. If an application calls the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> function to obtain the monitor name and <b>DisplayConfigGetDeviceInfo</b> either cannot get the monitor name or the target is forced without a monitor connected, the string in the <b>monitorFriendlyDeviceName</b> member of the DISPLAYCONFIG_TARGET_DEVICE_NAME structure is a <b>NULL</b> string and none of the bit-field flags in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_device_name_flags">DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS</a> structure are set.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_target_device_name#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.header">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_device_info_header">DISPLAYCONFIG_DEVICE_INFO_HEADER</a> structure that contains information about the request for the target device name. The caller should set the <b>type</b> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME and the <b>adapterId</b> and <b>id</b> members of DISPLAYCONFIG_DEVICE_INFO_HEADER to the target for which the caller wants the target device name. The caller should set the <b>size</b> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of the DISPLAYCONFIG_TARGET_DEVICE_NAME structure.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.flags">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_target_device_name_flags">DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS</a> structure that identifies, in bit-field flags, information about the target.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology">
            <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_video_output_technology">DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY</a> enumeration that specifies the target's connector type.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId">
            <summary>The manufacture identifier from the monitor extended display identification data (EDID). This member is set only when the <b>edidIdsValid</b> bit-field is set in the <b>flags</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId">
            <summary>The product code from the monitor EDID. This member is set only when the <b>edidIdsValid</b> bit-field is set in the <b>flags</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance">
            <summary>The one-based instance number of this particular target only when the adapter has multiple targets of this type. The connector instance is a consecutive one-based number that is unique within each adapter. If this is the only target of this type on the adapter, this value is zero.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.monitorFriendlyDeviceName">
            <summary>A NULL-terminated WCHAR string that is the  device name for the monitor. This name can be used with <i>SetupAPI.dll</i> to obtain the device name that is contained in the installation package.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME.monitorDevicePath">
            <summary>A NULL-terminated WCHAR string that is the  path to the device name for the monitor. This path can be used with <i>SetupAPI.dll</i> to obtain the device name that is contained in the installation package.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS">
            <summary>The DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS structure contains information about a target device.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_target_device_name_flags">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct.friendlyNameFromEdid">
            <summary>Gets or sets bit 0 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field.</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct.friendlyNameForced">
            <summary>Gets or sets bit 1 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field.</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct.edidIdsValid">
            <summary>Gets or sets bit 2 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field.</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct.reserved">
            <summary>Gets or sets bits 3-31 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._Anonymous_e__Union._Anonymous_e__Struct._bitfield" /> field. Allowed values are [0..536870911].</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_MODE">
            <summary>The DISPLAYCONFIG_TARGET_MODE structure describes a display path target mode.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_target_mode">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_MODE.targetVideoSignalInfo">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_video_signal_info">DISPLAYCONFIG_VIDEO_SIGNAL_INFO</a> structure that contains a detailed description of the current target mode.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID">
            <summary>The DISPLAYCONFIG_TOPOLOGY_ID enumeration specifies the type of display topology.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_topology_id">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_INTERNAL">
            <summary>Indicates that the display topology is an internal configuration.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_CLONE">
            <summary>Indicates that the display topology is clone-view configuration.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTEND">
            <summary>Indicates that the display topology is an extended configuration.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTERNAL">
            <summary>Indicates that the display topology is an external configuration.</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY">
            <summary>The DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY enumeration specifies the target's connector type.</summary>
            <remarks>
            <para>Values with "embedded" in their names indicate that the graphics adapter's video output device connects internally to the display device. In those cases, the DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL value is redundant. The caller should ignore DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL and just process the embedded values, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED and DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED. An embedded display port or UDI is also known as an integrated display port or UDI.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_video_output_technology#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER">
            <summary>Indicates a connector that is not one of the types that is indicated by the following enumerators in this enumeration.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15">
            <summary>Indicates an HD15 (VGA) connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO">
            <summary>Indicates an S-video connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO">
            <summary>Indicates a composite video connector group.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO">
            <summary>Indicates a component video connector group.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI">
            <summary>Indicates a Digital Video Interface (DVI) connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI">
            <summary>Indicates a High-Definition Multimedia Interface (HDMI) connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS">
            <summary>Indicates a Low Voltage Differential Swing (LVDS) connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN">
            <summary>Indicates a Japanese D connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI">
            <summary>Indicates an SDI connector.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL">
            <summary>Indicates an external display port, which is a display port that connects externally to a display device.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED">
            <summary>Indicates an embedded display port that connects internally to a display device.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL">
            <summary>Indicates an external Unified Display Interface (UDI), which is a UDI that connects externally to a display device.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED">
            <summary>Indicates an embedded UDI that connects internally to a display device.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE">
            <summary>Indicates a dongle cable that supports standard definition television (SDTV).</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST">
            <summary>
            <para>Indicates that the VidPN target is  a Miracast wireless display device. Supported starting in Windows 8.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ne-wingdi-displayconfig_video_output_technology#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL">
            <summary>Indicates that the video output device connects internally to a display device (for example, the internal connection in a laptop computer).</summary>
        </member>
        <member name="T:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO">
            <summary>The DISPLAYCONFIG_VIDEO_SIGNAL_INFO structure contains information about the video signal for a display.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-displayconfig_video_signal_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.pixelRate">
            <summary>The pixel clock rate.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.hSyncFreq">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_rational">DISPLAYCONFIG_RATIONAL</a> structure that represents horizontal sync.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.vSyncFreq">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_rational">DISPLAYCONFIG_RATIONAL</a> structure that represents vertical sync.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.activeSize">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_2dregion">DISPLAYCONFIG_2DREGION</a> structure that specifies the width and height (in pixels) of the active portion of the video signal.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.totalSize">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_2dregion">DISPLAYCONFIG_2DREGION</a> structure that specifies the width and height (in pixels) of the entire video signal.</summary>
        </member>
        <member name="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.scanLineOrdering">
            <summary>The scan-line ordering (for example, progressive or interlaced) of the video signal. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_scanline_ordering">DISPLAYCONFIG_SCANLINE_ORDERING</a> enumerated type.</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO._Anonymous_e__Union._AdditionalSignalInfo_e__Struct.videoStandard">
            <summary>Gets or sets bits 0-15 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO._Anonymous_e__Union._AdditionalSignalInfo_e__Struct._bitfield" /> field. Allowed values are [0..65535].</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO._Anonymous_e__Union._AdditionalSignalInfo_e__Struct.vSyncFreqDivider">
            <summary>Gets or sets bits 16-21 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO._Anonymous_e__Union._AdditionalSignalInfo_e__Struct._bitfield" /> field. Allowed values are [0..63].</summary>
        </member>
        <member name="P:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO._Anonymous_e__Union._AdditionalSignalInfo_e__Struct.reserved">
            <summary>Gets or sets bits 22-31 in the <see cref="F:Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO._Anonymous_e__Union._AdditionalSignalInfo_e__Struct._bitfield" /> field. Allowed values are [0..1023].</summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "USER32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.EnumDisplayMonitors(Windows.Win32.Graphics.Gdi.HDC,System.Nullable{Windows.Win32.Foundation.RECT},Windows.Win32.Graphics.Gdi.MONITORENUMPROC,Windows.Win32.Foundation.LPARAM)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.EnumDisplayMonitors(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.MONITORENUMPROC,Windows.Win32.Foundation.LPARAM)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.EnumDisplayMonitors(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.MONITORENUMPROC,Windows.Win32.Foundation.LPARAM)">
            <summary>The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors.</summary>
            <param name="hdc">
            <para>A handle to a display device context that defines the visible region of interest. If this parameter is <b>NULL</b>, the <i>hdcMonitor</i> parameter passed to the callback function will be <b>NULL</b>, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lprcClip">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by <i>hdc</i>. If <i>hdc</i> is non-<b>NULL</b>, the coordinates of the clipping rectangle are relative to the origin of the <i>hdc</i>. If <i>hdc</i> is <b>NULL</b>, the coordinates are virtual-screen coordinates. This parameter can be <b>NULL</b> if you don't want to clip the region specified by <i>hdc</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpfnEnum">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> application-defined callback function.</param>
            <param name="dwData">Application-defined data that <b>EnumDisplayMonitors</b> passes directly to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> function.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>There are two reasons to call the <b>EnumDisplayMonitors</b> function: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO*)">
            <summary>The GetMonitorInfo function retrieves information about a display monitor. (Unicode)</summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="lpmi">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure that receives information about the specified display monitor. You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure is a superset of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getmonitorinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines GetMonitorInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getmonitorinfow#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.EnumDisplaySettings(System.String,Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE,Windows.Win32.Graphics.Gdi.DEVMODEW@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.EnumDisplaySettings(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE,Windows.Win32.Graphics.Gdi.DEVMODEW*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.EnumDisplaySettings(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE,Windows.Win32.Graphics.Gdi.DEVMODEW*)">
            <summary>The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function. (Unicode)</summary>
            <param name="lpszDeviceName">
            <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information. This parameter is either <b>NULL</b> or a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-display_devicea">DISPLAY_DEVICE</a>.<b>DeviceName</b> returned from <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesa">EnumDisplayDevices</a>. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="iModeNum"></param>
            <param name="lpDevMode">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <c>sizeof(DEVMODE)</c>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data. The <b>EnumDisplaySettings</b> function sets values for the following five <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> members: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The function fails if <i>iModeNum</i> is greater than the index of the display device's last graphics mode. As noted in the description of the <i>iModeNum</i> parameter, you can use this behavior to enumerate all of a display device's graphics modes. <h3><a id="DPI_Virtualization"></a><a id="dpi_virtualization"></a><a id="DPI_VIRTUALIZATION"></a>DPI Virtualization</h3> This API does not participate in DPI virtualization. The output given is always in terms of physical pixels, and is not related to the calling context.</para>
            <para>> [!NOTE] > The winuser.h header defines EnumDisplaySettings as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDisplayConfigBufferSizes(Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS,System.UInt32@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetDisplayConfigBufferSizes(Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS,System.UInt32*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDisplayConfigBufferSizes(Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS,System.UInt32*,System.UInt32*)">
            <summary>The GetDisplayConfigBufferSizes function retrieves the size of the buffers that are required to call the QueryDisplayConfig function.</summary>
            <param name="flags"></param>
            <param name="numPathArrayElements">Pointer to a variable that receives the number of elements in the path information table. The <i>pNumPathArrayElements</i> parameter value is then used by a subsequent call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> function. This parameter cannot be <b>NULL</b>.</param>
            <param name="numModeInfoArrayElements">Pointer to a variable that receives the number of elements in the mode information table. The <i>pNumModeInfoArrayElements</i> parameter value is then used by a subsequent call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> function. This parameter cannot be <b>NULL</b>.</param>
            <returns>
            <para>The function returns one of the following return codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Given the current display path configuration and the requested flags, <b>GetDisplayConfigBufferSizes</b> returns the size of the path and mode tables that are required to store the information. <b>GetDisplayConfigBufferSizes</b> can return values that are slightly larger than are actually required because it determines that all source and target paths are valid; whereas, the driver might place some restrictions on the possible combinations. As <b>GetDisplayConfigBufferSizes</b> can only determine the required array size of that moment in time, it is possible that between calls to <b>GetDisplayConfigBufferSizes</b> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> the system configuration has changed and the provided array sizes are no longer sufficient to store the new path data. If a caller is aware that it must enable additional sources and targets, the caller can allocate a larger mode information array than is returned from <b>GetDisplayConfigBufferSizes</b> so that it has the space to add the additional source and target modes after calling <b>QueryDisplayConfig</b> and before calling <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getdisplayconfigbuffersizes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.QueryDisplayConfig(Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS,System.UInt32@,Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO*,System.UInt32@,Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO*,Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.QueryDisplayConfig(Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS,System.UInt32*,Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO*,System.UInt32*,Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO*,Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.QueryDisplayConfig(Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS,System.UInt32*,Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO*,System.UInt32*,Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO*,Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID*)">
            <summary>The QueryDisplayConfig function retrieves information about all possible display paths for all display devices, or views, in the current setting.</summary>
            <param name="flags"></param>
            <param name="numPathArrayElements">Pointer to a variable that contains the number of elements in <i>pPathInfoArray</i>. This parameter cannot be <b>NULL</b>. If <b>QueryDisplayConfig</b> returns ERROR_SUCCESS, <i>pNumPathInfoElements</i> is updated with the number of valid entries in <i>pPathInfoArray</i>.</param>
            <param name="pathArray">Pointer to a variable that contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_info">DISPLAYCONFIG_PATH_INFO</a> elements. Each element in <i>pPathInfoArray</i> describes a single path from a source to a target. The source and target mode information indexes are only valid in combination with the <i>pmodeInfoArray</i> tables that are returned for the API at the same time. This parameter cannot be <b>NULL</b>. The <i>pPathInfoArray</i> is always returned in path priority order. For more information about path priority order, see <a href="https://docs.microsoft.com/windows-hardware/drivers/display/path-priority-order">Path Priority Order</a>.</param>
            <param name="numModeInfoArrayElements">Pointer to a variable that specifies the number in element of the mode information table. This parameter cannot be <b>NULL</b>. If <b>QueryDisplayConfig</b> returns ERROR_SUCCESS, <i>pNumModeInfoArrayElements</i> is updated with the number of valid entries in <i>pModeInfoArray</i>.</param>
            <param name="modeInfoArray">Pointer to a variable that contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_mode_info">DISPLAYCONFIG_MODE_INFO</a> elements. This parameter cannot be <b>NULL</b>.</param>
            <param name="currentTopologyId">
            <para>Pointer to a variable that receives the identifier of the currently active topology in the CCD database. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_topology_id">DISPLAYCONFIG_TOPOLOGY_ID</a> enumerated type. The <i>pCurrentTopologyId</i> parameter is only set when the <i>Flags</i> parameter value is QDC_DATABASE_CURRENT. If the <i>Flags</i> parameter value is set to QDC_DATABASE_CURRENT, the <i>pCurrentTopologyId</i> parameter must not be <b>NULL</b>. If the <i>Flags</i> parameter value is not set to QDC_DATABASE_CURRENT, the <i>pCurrentTopologyId</i> parameter value must be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-querydisplayconfig#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>The function returns one of the following return codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>As the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getdisplayconfigbuffersizes">GetDisplayConfigBufferSizes</a> function can only determine the required array size at a particular moment in time, it is possible that between calls to <b>GetDisplayConfigBufferSizes</b> and <b>QueryDisplayConfig</b> the system configuration will change and the provided array sizes will no longer be sufficient to store the new path data. In this situation, <b>QueryDisplayConfig</b> fails with ERROR_INSUFFICIENT_BUFFER, and the caller should call <b>GetDisplayConfigBufferSizes</b> again to get the new array sizes. The caller should then allocate the correct amount of memory. <b>QueryDisplayConfig</b> returns paths in the path array that the <i>pPathInfoArray</i> parameter specifies and the source and target modes in the mode array that the <i>pModeInfoArray</i> parameter specifies. <b>QueryDisplayConfig</b> always returns paths in path priority order. If QDC_ALL_PATHS is set in the <i>Flags</i> parameter, <b>QueryDisplayConfig</b> returns all the inactive paths after the active paths. Full path, source mode, and target mode information is available for all active paths. The <b>ModeInfoIdx</b> members in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_source_info">DISPLAYCONFIG_PATH_SOURCE_INFO</a> and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_target_info">DISPLAYCONFIG_PATH_TARGET_INFO</a> structures for the source and target are set up for these active paths. For inactive paths, returned source and target mode information is not available; therefore, the target information in the path structure is set to default values, and the source and target mode indexes are marked as invalid. For database queries, if the current connect monitors have an entry, <b>QueryDisplayConfig</b> returns full path, source mode, and target mode information (same as for active paths). However, if the database does not have a entry, <b>QueryDisplayConfig</b> returns just the path information with the default target details (same as for inactive paths). For an example of how source and target mode information relates to path information, see <a href="https://docs.microsoft.com/windows-hardware/drivers/display/relationship-of-mode-information-to-path-information">Relationship of Mode Information to Path Information</a>. The caller can use <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-displayconfiggetdeviceinfo">DisplayConfigGetDeviceInfo</a> to obtain additional information about the source or target device, for example, the monitor names and monitor preferred mode and source device name. If a target is currently being force projected, the <b>statusFlags</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_target_info">DISPLAYCONFIG_PATH_TARGET_INFO</a> structure has one of the DISPLAYCONFIG_TARGET_FORCED_XXX flags set. If the QDC_DATABASE_CURRENT flag is set in the <i>Flags</i> parameter, <b>QueryDisplayConfig</b> returns the topology identifier of the active database topology in the variable that the <i>pCurrentTopologyId</i> parameter points to. If the QDC_ALL_PATHS or QDC_ONLY_ACTIVE_PATHS flag is set in the <i>Flags</i> parameter, the <i>pCurrentTopologyId</i> parameter must be set to <b>NULL</b>; otherwise, <b>QueryDisplayConfig</b> returns ERROR_INVALID_PARAMETER. If a caller calls <b>QueryDisplayConfig</b> with the QDC_DATABASE_CURRENT flag set in the <i>Flags</i> parameter, <b>QueryDisplayConfig</b> initializes the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_2dregion">DISPLAYCONFIG_2DREGION</a> structure that is specified in the <b>totalSize</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_video_signal_info">DISPLAYCONFIG_VIDEO_SIGNAL_INFO</a> structure to zeros and does not complete DISPLAYCONFIG_2DREGION. The DEVMODE structure that is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaysettingsa">EnumDisplaySettings</a> Win32 function (described in the Windows SDK documentation) contains information that relates to both the source and target modes. However, the <a href="https://docs.microsoft.com/windows-hardware/drivers/display/ccd-apis">CCD APIs</a> explicitly separate the source and target mode components.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-querydisplayconfig#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DisplayConfigGetDeviceInfo(Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.DisplayConfigGetDeviceInfo(Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.DisplayConfigGetDeviceInfo(Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER*)">
            <summary>The DisplayConfigGetDeviceInfo function retrieves display configuration information about the device.</summary>
            <param name="requestPacket">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_device_info_header">DISPLAYCONFIG_DEVICE_INFO_HEADER</a> structure. This structure contains information about the request, which includes the packet type in the <b>type</b> member. The type and size of additional data that <b>DisplayConfigGetDeviceInfo</b> returns after the header structure depend on the packet type.</param>
            <returns>
            <para>The function returns one of the following return codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Use the <b>DisplayConfigGetDeviceInfo</b> function to obtain additional information about a source or target for an adapter, such as the display name, the preferred display mode, and source device name. The caller can call <b>DisplayConfigGetDeviceInfo</b> to obtain more friendly names to display in the user interface. The caller can obtain names for the adapter, the source, and the target. The caller can also call <b>DisplayConfigGetDeviceInfo</b> to obtain the best resolution of the connected display device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-displayconfiggetdeviceinfo#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
    </members>
</doc>
